#!/bin/sh



#
# instructions for building OSIRIS
#  -- problems, contact us at forensics@ncbi.nlm.nih.gov
#
#
# wxWidgets 3.0.4 is required
# For more information, see http://www.wxwidgets.org
#
# This shell script is for building the macintosh version
# of osiris.
#
###########################################################################
#
#  MS-Windows build
#
# To build on MS-Windows, with VC++ 2010 (ver 10)
# wxWidgets, libxml2, libxslt, and libiconv are also required.
#  wxWidgets can be downloaded at http://www.wxwidgets.org/ and
#  modified versions of libxml2, libxslt, and libiconv are included.
#
#  Source code obtained for libxml2 and libxslt from http://xmlsoft.org/
#  Source code for libiconv obtained at http://www.gnu.org/software/libiconv/
#  Header files for all three libraries for
#  MC VC++ obtained at http://www.zlatkovic.com/libxml.en.html
#  and used to replace the corresponding header files in the distribution.
#
# Modification (already done) to these libraries:
#
#  In libxslt-1.1.26/libexslt, modified libexslt.h and changed
#  #include <win32config.h>
#  to
#  #include <libxslt/win32config.h>
#
#  Removed all occurrences of
#  #include <win32config.h>
#  from all other *.c, *.h files and made sure that
#  #include "libexslt/libexslt.h" is present
#
#  Created VC++ projects and build the code generation option of
#  "Multithreaded" (/MD)
#
#
#
# wxWidgets:
#
#  OSIRIS uses wxWidgets v 3.0.4
#  Download wxWidgets at http://wxwidgets.org/downloads/ and select either 
#  the ZIP or 7z download.
#  Create a new folder, (for example wxWidgets-3.0.4) and unpack the 
#  contents of the zip file there.
#  Set the environment variable WXHOME to the full path of this folder.  
#  This is done in Control Panel, search for "environment"
#  Go to the wxWidgets "build" folder, then "msw"
#  Select the appropriate solution (.sln) file for your version of Visual 
#  C++. (In visual C++, see Help -> About Microsoft Visual Studio)  It 
#  should be 10 or later to build OSIRIS.
#  Build in Visual C++ for "Release" and "Win32" and optionally for "Debug" 
#  and "Win32"  Both can coexist in the same directory structure.
#
#  for debugging, the file, include\wx\msw\msvcrt.h,
#  was edited and "#define _CRTDBG_MAP_ALLOC" was added above "#include <stdlib>"
#  as per instructions at https://msdn.microsoft.com/en-us/library/x98tx3cf.aspx
#
# Build OSIRIS:
#
#  OSIRIS is built with Microsoft Visual C++ from Microsoft Visual Studio 
#  2010 Professional.  Use of a newer version of Visual C++ may result in 
#  compiler errors.
#  It is important that the Visual C++ environment is started AFTER setting 
#  WXHOME in the environment.
#  Download the source code for version 2.6 (or 2.4 or later) from 
#  https://github.com/ncbi/osiris Version 2.3 requires an older version of 
#  wxWidgets.  Select the version from the "Branch" pulldown on the left 
#  side of the web page and select "Download ZIP" from the right side.  
#  Unpack the zip file and go to the "osiris" folder.
#  Open the solution file, osirisAll.sln with Visual C++ 2010 (or later)
#  Select "Release" and "Win32" in the toolbar or from the menu
#  bar: Build -> Configuration Manager.
#  Build the solution.  From the menu bar: Build -> Rebuild Solution
#  Optional - If you built wxWidgets for "Debug" you can also build OSIRIS 
#  for "Debug"  however it recommended that you copy the directory 
#  structure of an OSIRIS installation to OsirisAnalysis/Debug except for 
#  OsirisAnalysis.exe
#  
#  An alternative to creating an .msi file is
#  to run a perl script, .\ZipPerl\MakeZip.pl
#  which will set up the directory structure in .\ZipPerl\Osiris
#  and then create a zip file.
#
#  This perl script requires cygwin, perl, and 7zip which are available
#  for free at
#
# http://www.cygwin.com/
# http://www.activestate.com/
# http://www.7-zip.org/
#
# After the above are installed, the commands, 7z and cp must be
# available from PATH environment variable
#
# If you want to create the directory structure w/o 
# a zip file, then comment out the line of code in MakeZip.pl
# containing '7z' by preceeding it with a pound sign (#) like
# the first several lines of this file
#
# The directory structure will be in .\ZipPerl\Osiris and can be moved
#
#
###########################################################################
#
#
#  macintosh 10.9 - 10.10 build - UNIX command line
#
#
# Make sure you have the developer tools for Macintosh installed.
# From the command line run the following:
#
#  gcc --version
#
# If gcc is not installed, you will receive a message indicating that, 
# otherwise it will display version information.
#
# Build wxWidgets 3.0.4 - Go to http://www.wxwidgets.org/downloads/
# and download the source code from the link showing: 
#    "Source for Linux, OS X,etc."
# Unpack the download to a new directory, for example
# from the directory containing the download, run the following:
#   tar xvf wxWidgets-3.0.4.tar.bz2
# This will unpack the source code into a directory named 
#   wxWidgets-3.0.4
# change to that directory and create a new directory, build-cocoa
#
#  cd wxWidgets-3.0.4
#  mkdir build-cocoa
#
# there is a shell script file in this osiris distribution, in 
# the folder buildwx-osx, named config.sh
# copy that file to wxWidgets-3.0.4/build-cocoa
#
# if the osiris directory and wxWidgets have the same parent directory, the
# following commands should work from the wxWidgets directory
#
#  cp ../../osiris/build-osx/config.sh ./build-cocoa/config.sh
# 
# change directory to wxWidgets-3.0.4/build-cocoa and run the script
#   cd wxWidgets-3.0.4/build-cocoa
#   sh config.sh
#
# when finished, the output will be in a file, build_log.txt
# make sure there are no error messages at the end of the file
#
# install wxWidgets.  The default installation location from the
# build script is  ~/local/wxRelease where ~ represents the
# user's home directory
#
# run the following command:
#   make install
#
# then make sure that ~/local/wxRelease has four subdirectories
#   bin, include, lib, and share
#
# If wxWidgets will be used from a location other than ~/local/wxRelease
# set the environment variable $WXHOME to that location before building
# OSIRIS.
#
#
# Build OSIRIS
#
# this file, README, also searves as a shell script to build OSIRIS
# on the Macintosh
# From the command line run:
#
#  change directory to the osiris source directory and run:
#
#  sh README
#
# if there are no errors, then run:
#
#  make
#
# there will be a lot of warnings, but if there are no errors
# run the following script to install Osiris in ~/Applications
# and create a distribution file, Osiris-Mac-2.x.tar.gz in
# the this folder
#
#   sh cpmac
#
# If there are no errors, you are done. Using the
# Macintosh user interface, open your "Home" folder
# in Finder, then Applications, and run Osiris.app
#
#
cd `dirname $0`
if test -r "build-osiris-mac-osx.sh"; then
  sh build-osiris-mac-osx.sh
fi
